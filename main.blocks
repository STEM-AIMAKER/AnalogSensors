<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="xE;2|dy|#wUYI@y2sSK!" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="8?V_._7*~NzmrY[sUjX8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HanshinAnalogSensors" line1="{" line2="/**" line3=" * Hanshin STEM Sensors" line4=" */" line5="//% color=190 weight=100 icon=&quot;\uf1ec&quot; block=&quot;Hanshin STEM analog sensors&quot;" line6="//% groups=['Ambient Light','Flame', 'Moisture','Tracker','others']" line7="" line8="    //% group=&quot;Ambient Light&quot;" line9="    export namespace AmbientLignt {" line10="        //% blockId=lightValue block=&quot;Read light value at pin=%p&quot;" line11="        //% group=&quot;Ambient Light&quot;" line12="        export function lightValue(p: AnalogPin): number {" line13="            return pins.analogReadPin(p);" line14="        }" line15="    };" line16="" line17="    //% group=&quot;Flame&quot;" line18="    export namespace Flame {" line19="        //% blockId=flameValue block=&quot;Read frame value at pin=%p&quot;" line20="        //% group=&quot;Flame&quot;" line21="        export function flameValue(p: AnalogPin): number {" line22="            return pins.analogReadPin(p);" line23="        }" line24="" line25="        //% blockId=isFlame block=&quot;Is frame at pin=%p&quot;" line26="        //% group=&quot;Flame&quot;" line27="        export function isFlame(p: AnalogPin): boolean {" line28="            if( pins.analogReadPin(p) &gt;= 50 ) {" line29="                return true;" line30="            }" line31="            return false;" line32="        }" line33="    };" line34="" line35="    //% group=&quot;Moisture&quot;" line36="    export namespace Moisture {" line37="        //% blockId=moistureValue block=&quot;Read moisture value at pin=%p&quot;" line38="        //% group=&quot;Moisture&quot;" line39="        export function moistureValue(p: AnalogPin): number {" line40="            return pins.analogReadPin(p);" line41="        }" line42="    };" line43="" line44="    //% group=&quot;Tracker&quot;" line45="    export namespace Tracker {" line46="        //% blockId=trackerValue block=&quot;Read tracker value at pin=%p&quot;" line47="        //% group=&quot;Tracker&quot;" line48="        export function trackerValue(p: AnalogPin): number {" line49="            return pins.analogReadPin(p);" line50="        }" line51="" line52="        //% blockId=isBlackLine block=&quot;Is black line at pin=%p&quot;" line53="        //% group=&quot;Tracker&quot;" line54="        export function isBlackLine(p: AnalogPin): boolean {" line55="            if( pins.analogReadPin(p) &gt;= 50 ) {" line56="                return true;" line57="            }" line58="            return false;" line59="        }" line60="    };" line61="}" numlines="62"></mutation></block></statement></block></xml>